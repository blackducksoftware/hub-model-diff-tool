{
  "swagger": "2.0",
  "info": {
    "contact": {},
    "license": {}
  },
  "host": "int-hub01.dc1.lan:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "composite-code-location-rest-server",
      "description": "Composite Code Location Rest Server"
    },
    {
      "name": "report-rest-server",
      "description": "Report Rest Server"
    },
    {
      "name": "policy-rule-rest-server",
      "description": "Policy Rule Rest Server"
    },
    {
      "name": "o-auth-client-rest-server",
      "description": "O Auth Client Rest Server"
    },
    {
      "name": "component-rest-server",
      "description": "Component Rest Server"
    },
    {
      "name": "external-extension-rest-server",
      "description": "External Extension Rest Server"
    },
    {
      "name": "role-rest-server",
      "description": "Role Rest Server"
    },
    {
      "name": "component-version-rest-server",
      "description": "Component Version Rest Server"
    },
    {
      "name": "notification-rest-server",
      "description": "Notification Rest Server"
    },
    {
      "name": "project-version-rest-server",
      "description": "Project Version Rest Server"
    },
    {
      "name": "matched-file-rest-server",
      "description": "Matched File Rest Server"
    },
    {
      "name": "version-risk-profile",
      "description": "Version Risk Profile"
    },
    {
      "name": "user-group-rest-server",
      "description": "User Group Rest Server"
    },
    {
      "name": "user-filters-rest-server",
      "description": "User Filters Rest Server"
    },
    {
      "name": "code-location-rest-server",
      "description": "Code Location Rest Server"
    },
    {
      "name": "notification-subscription-rest-server",
      "description": "Notification Subscription Rest Server"
    },
    {
      "name": "aggregate-bom-rest-server",
      "description": "Aggregate Bom Rest Server"
    },
    {
      "name": "user-notification-filter-rest-server",
      "description": "User Notification Filter Rest Server"
    },
    {
      "name": "vulnerable-component-rest-server",
      "description": "Vulnerable Component Rest Server"
    },
    {
      "name": "user-rest-server",
      "description": "User Rest Server"
    },
    {
      "name": "license-rest-server",
      "description": "License Rest Server"
    },
    {
      "name": "vulnerability-rest-server",
      "description": "Vulnerability Rest Server"
    },
    {
      "name": "scan-rest-server",
      "description": "Scan Rest Server"
    },
    {
      "name": "version-bom-policy-rest-server",
      "description": "Version Bom Policy Rest Server"
    },
    {
      "name": "project-rest-server",
      "description": "Project Rest Server"
    },
    {
      "name": "user-role-rest-server",
      "description": "User Role Rest Server"
    },
    {
      "name": "linked-data-rest-server",
      "description": "Linked Data Rest Server"
    }
  ],
  "paths": {
    "/api/bom-import": {
      "head": {
        "tags": [
          "linked-data-rest-server"
        ],
        "summary": "head",
        "operationId": "headUsingHEAD",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "linked-data-rest-server"
        ],
        "summary": "importBom",
        "operationId": "importBomUsingPOST",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "file",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/codelocations": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocations",
        "operationId": "findCodeLocationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.codelocation-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "q",
            "in": "query",
            "description": "search",
            "required": false,
            "type": "string"
          },
          {
            "name": "codeLocationType",
            "in": "query",
            "description": "codeLocationType",
            "required": false,
            "type": "string",
            "enum": [
              "SCM",
              "FS",
              "BOM_IMPORT"
            ]
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : type, url",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<CodeLocationView>"
            }
          }
        }
      }
    },
    "/api/codelocations/{codeLocationId}": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocation",
        "operationId": "findCodeLocationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "parameters": [
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "updateCodeLocation",
        "operationId": "updateCodeLocationUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.codelocation-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "codeLocationRequest",
            "description": "codeLocationRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          },
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/CodeLocationView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "composite-code-location-rest-server"
        ],
        "summary": "deleteCodeLocation",
        "operationId": "deleteCodeLocationUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/codelocations/{codeLocationId}/scan-summaries": {
      "get": {
        "tags": [
          "scan-rest-server"
        ],
        "summary": "findScanSummaries",
        "operationId": "findScanSummariesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.scan-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pageRequest",
            "description": "pageRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PageRequest"
            }
          },
          {
            "name": "codeLocationId",
            "in": "path",
            "description": "codeLocationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : createdAt, updatedAt",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<ScanSummaryView>"
            }
          }
        }
      }
    },
    "/api/components": {
      "get": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "getComponents",
        "operationId": "getComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<ComponentSearchResultView>"
            }
          }
        }
      }
    },
    "/api/components/{componentId}": {
      "get": {
        "tags": [
          "component-rest-server"
        ],
        "summary": "findComponent",
        "operationId": "findComponentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findVersionsByProjectId",
        "operationId": "findVersionsByProjectIdUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.component-version-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : versionName, releasedOn",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ComponentVersionView>"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}": {
      "get": {
        "tags": [
          "component-version-rest-server"
        ],
        "summary": "findVersion",
        "operationId": "findVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-version-1+json"
        ],
        "parameters": [
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ComponentVersionView"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/origin/{originId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component version and origin",
        "operationId": "pageChannelVulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.vulnerability-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "ID of the version to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "originId",
            "in": "path",
            "description": "ID of the origin to limit retrieved vulnerabilities to",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<VulnerabilityView>"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/versions/{versionId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component version",
        "operationId": "pageVersionVulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.vulnerability-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "ID of the version to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<VulnerabilityView>"
            }
          }
        }
      }
    },
    "/api/components/{componentId}/vulnerabilities": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds vulnerabilities by component",
        "operationId": "pageComponentVulnerabilitiesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.vulnerability-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The number of records to retrieve",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "The number of records from the beginning of the results to skip",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "ID of the component to get vulnerabilities for",
            "required": true,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "Search term(s) to filter results by",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<VulnerabilityView>"
            }
          }
        }
      }
    },
    "/api/externalextensions": {},
    "/api/externalextensions/{externalExtensionId}": {},
    "/api/externalextensions/{externalExtensionId}/authenticate": {},
    "/api/externalextensions/{externalExtensionId}/options/currentuser": {},
    "/api/externalextensions/{externalExtensionId}/options/global": {},
    "/api/externalextensions/{externalExtensionId}/options/users": {},
    "/api/externalextensions/{externalExtensionId}/options/users/{userId}": {},
    "/api/licenses/{licenseId}": {
      "get": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "findLicense",
        "operationId": "findLicenseUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.license-1+json"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/LicenseView"
            }
          }
        }
      }
    },
    "/api/licenses/{licenseId}/text": {
      "get": {
        "tags": [
          "license-rest-server"
        ],
        "summary": "getLicenseText",
        "operationId": "getLicenseTextUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.license-text-original-1+json",
          "text/plain"
        ],
        "parameters": [
          {
            "name": "licenseId",
            "in": "path",
            "description": "licenseId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/api/notification-state-filters": {
      "get": {
        "tags": [
          "user-notification-filter-rest-server"
        ],
        "summary": "findNotificationStateFilterView",
        "operationId": "findNotificationStateFilterViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/notification-type-filters": {
      "get": {
        "tags": [
          "user-notification-filter-rest-server"
        ],
        "summary": "getNotificationTypeFilters",
        "operationId": "getNotificationTypeFiltersUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/notifications": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findNotifications",
        "operationId": "findNotificationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.notification-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<NotificationView>"
            }
          }
        }
      }
    },
    "/api/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findNotification",
        "operationId": "findNotificationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.notification-1+json"
        ],
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationView"
            }
          }
        }
      }
    },
    "/api/oauthclients": {},
    "/api/oauthclients/{oAuthClientId}": {},
    "/api/policy-rules": {
      "get": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "findPolicyRulesPublic",
        "operationId": "findPolicyRulesPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.policy-rules-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<PolicyRuleView>"
            }
          }
        }
      }
    },
    "/api/policy-rules/{policyRuleId}": {
      "get": {
        "tags": [
          "policy-rule-rest-server"
        ],
        "summary": "findPolicyRulePublic",
        "operationId": "findPolicyRulePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.policy-rules-1+json"
        ],
        "parameters": [
          {
            "name": "policyRuleId",
            "in": "path",
            "description": "policyRuleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PolicyRuleView"
            }
          }
        }
      }
    },
    "/api/projects": {
      "get": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "findProjects",
        "operationId": "findProjectsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.project-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name, description, projectTier",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ProjectView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "createProject",
        "operationId": "createProjectUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "projectRequest",
            "description": "projectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "findProject",
        "operationId": "findProjectUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "updateProject",
        "operationId": "updateProjectUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "projectRequest",
            "description": "projectRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-rest-server"
        ],
        "summary": "deleteProject",
        "operationId": "deleteProjectUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects/{projectId}/versions": {
      "get": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "findVersionsByProjectId",
        "operationId": "findVersionsByProjectIdUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.project-version-1",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : versionName, nickname, releaseComments, releasedOn",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ProjectVersionView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "createVersion",
        "operationId": "createVersionUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionRequest",
            "description": "versionRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectVersionRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}": {
      "get": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "findVersion",
        "operationId": "findVersionUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "updateVersion",
        "operationId": "updateVersionUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.project-version-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionView",
            "description": "versionView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ProjectVersionView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "project-version-rest-server"
        ],
        "summary": "deleteVersion",
        "operationId": "deleteVersionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/codelocations": {
      "get": {
        "tags": [
          "code-location-rest-server"
        ],
        "summary": "findCodeLocationForProjectVersions",
        "operationId": "findCodeLocationForProjectVersionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.codelocation-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<CodeLocationView>"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components": {
      "get": {
        "tags": [
          "aggregate-bom-rest-server"
        ],
        "summary": "findBomComponents",
        "operationId": "findBomComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.bomcomponent-1"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pageRequest",
            "description": "pageRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PageRequest"
            }
          },
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<VersionBomComponentView>"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.matched-file-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<MatchedFileView>"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyStatusForComponent",
        "operationId": "getPolicyStatusForComponentUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BomComponentPolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.matched-file-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<MatchedFileView>"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/origins/{componentOriginId}/matched-files": {
      "get": {
        "tags": [
          "matched-file-rest-server"
        ],
        "summary": "findMatchedFiles",
        "operationId": "findMatchedFilesUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.matched-file-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentOriginId",
            "in": "path",
            "description": "componentOriginId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<MatchedFileView>"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/components/{componentId}/versions/{componentVersionId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "getPolicyStatusForComponentVersion",
        "operationId": "getPolicyStatusForComponentVersionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.component-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentId",
            "in": "path",
            "description": "componentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "componentVersionId",
            "in": "path",
            "description": "componentVersionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BomComponentPolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/policy-status": {
      "get": {
        "tags": [
          "version-bom-policy-rest-server"
        ],
        "summary": "findScanSummary",
        "operationId": "findScanSummaryUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.bom-policy-status-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionBomPolicyStatusView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/risk-profile": {
      "get": {
        "tags": [
          "version-risk-profile"
        ],
        "summary": "find version risk-profile",
        "operationId": "findProjectVersionRiskProfileUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.risk-profile-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VersionRiskProfileView"
            }
          }
        }
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/vulnerable-bom-components": {
      "get": {
        "tags": [
          "vulnerable-component-rest-server"
        ],
        "summary": "findVulnerableComponents",
        "operationId": "findVulnerableComponentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.vulnerable-component-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "projectId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : componentName, vulnerabilityName, severity",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<VulnerableComponentView>"
            }
          }
        }
      }
    },
    "/api/reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "download",
        "operationId": "downloadUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "byte"
              }
            }
          }
        }
      }
    },
    "/api/reports/{reportId}/contents": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findContents",
        "operationId": "findContentsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportContent"
            }
          }
        }
      }
    },
    "/api/roles": {
      "get": {
        "tags": [
          "role-rest-server"
        ],
        "summary": "getRolesPublic",
        "operationId": "getRolesPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.role-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<RoleView>"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}": {
      "get": {
        "tags": [
          "role-rest-server"
        ],
        "summary": "getRolePublic",
        "operationId": "getRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleView"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}/inheriting-users": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getUsersByInheritedRolePublic",
        "operationId": "getUsersByInheritedRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.user-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<UserView>"
            }
          }
        }
      }
    },
    "/api/roles/{roleId}/users": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getUsersByRolePublic",
        "operationId": "getUsersByRolePublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.user-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "roleId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<UserView>"
            }
          }
        }
      }
    },
    "/api/scan-summaries/{scanId}": {
      "get": {
        "tags": [
          "scan-rest-server"
        ],
        "summary": "findScanSummary",
        "operationId": "findScanSummaryUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.scan-1+json"
        ],
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "scanId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ScanSummaryView"
            }
          }
        }
      }
    },
    "/api/user-status-filters": {
      "get": {
        "tags": [
          "user-filters-rest-server"
        ],
        "summary": "findUserStatusFilterView",
        "operationId": "findUserStatusFilterViewUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/FilterView"
            }
          }
        }
      }
    },
    "/api/usergroups": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "page",
        "operationId": "pageUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.usergroup-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "pageRequest",
            "description": "pageRequest",
            "required": false,
            "schema": {
              "$ref": "#/definitions/PageRequest"
            }
          },
          {
            "name": "q",
            "in": "query",
            "description": "q",
            "required": false,
            "type": "string"
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "activeOnly",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<UserGroupView>"
            }
          }
        }
      }
    },
    "/api/usergroups/{userGroupId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "get",
        "operationId": "getUsingGET_2",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "findUsers",
        "operationId": "findUsersUsingGET_1",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.user-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : userName, email, firstName, lastName",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          },
          {
            "name": "rql",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<UserView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "createUser",
        "operationId": "createUserUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "userRequest",
            "description": "userRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}": {
      "get": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "findUser",
        "operationId": "findUserUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "updateUser",
        "operationId": "updateUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/changepassword": {
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "changePasswordCurrentUser",
        "operationId": "changePasswordCurrentUserUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChangePasswordCurrentUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/inherited-roles": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getInheritedRolesByUserPublic",
        "operationId": "getInheritedRolesByUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.role-assignment-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<RoleAssignmentView>"
            }
          }
        }
      }
    },
    "/api/users/{userId}/notification-counts": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotificationsCount",
        "operationId": "findUserNotificationsCountUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.notification-counts-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/notification-subscriptions": {
      "get": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "findNotificationSubscriptions",
        "operationId": "findNotificationSubscriptionsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.notification-subscription-1",
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<NotificationSubscriptionView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "createNotificationSubscription",
        "operationId": "createNotificationSubscriptionUsingPOST",
        "consumes": [
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionTarget",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/users/{userId}/notification-subscriptions/{subscriptionId}": {
      "get": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "findNotificationSubscription",
        "operationId": "findNotificationSubscriptionUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.notification-subscription-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationSubscriptionView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "notification-subscription-rest-server"
        ],
        "summary": "deleteNotificationSubscription",
        "operationId": "deleteNotificationSubscriptionUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "subscriptionId",
            "in": "path",
            "description": "subscriptionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/users/{userId}/notifications": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotifications",
        "operationId": "findUserNotificationsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.notification-user-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "startDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "endDate",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter",
            "in": "query",
            "description": "filter",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<NotificationUserView>"
            }
          }
        }
      }
    },
    "/api/users/{userId}/notifications/{notificationId}": {
      "get": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "findUserNotification",
        "operationId": "findUserNotificationUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        }
      },
      "put": {
        "tags": [
          "notification-rest-server"
        ],
        "summary": "updateUserNotification",
        "operationId": "updateUserNotificationUsingPUT",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.notification-user-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "notificationId",
            "in": "path",
            "description": "notificationId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "userView",
            "description": "userView",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/NotificationUserView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/resetpassword": {
      "put": {
        "tags": [
          "user-rest-server"
        ],
        "summary": "resetPassword",
        "operationId": "resetPasswordUsingPUT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.user-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "item",
            "description": "item",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResetPassword"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/roles": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getRolesByUserPublic",
        "operationId": "getRolesByUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.role-assignment-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          },
          {
            "name": "q",
            "in": "query",
            "description": "key:value",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<RoleAssignmentView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "addRoleForUserPublic",
        "operationId": "addRoleForUserPublicUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "roleAssignmentRequest",
            "description": "roleAssignmentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RoleAssignmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      }
    },
    "/api/users/{userId}/roles/{roleAssignmentId}": {
      "get": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "getRoleAssignmentForUserPublic",
        "operationId": "getRoleAssignmentForUserPublicUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.role-assignment-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RoleAssignmentView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-role-rest-server"
        ],
        "summary": "deleteRoleAssignmentForUserPublic",
        "operationId": "deleteRoleAssignmentForUserPublicUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "roleAssignmentId",
            "in": "path",
            "description": "roleAssignmentId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/usergroups": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getUserAssignedGroups",
        "operationId": "getUserAssignedGroupsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json;itemtype\u003dvnd.blackducksoftware.usergroup-1",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : name,description",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/PageView<UserGroupView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "addUserToGroups",
        "operationId": "addUserToGroupsUsingPOST",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "groupsAssignment",
            "description": "groupsAssignment",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UserGroupAssignmentRequest"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/usergroups/{userGroupId}": {
      "get": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "getSpecificUserAssignedToGroup",
        "operationId": "getSpecificUserAssignedToGroupUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.usergroup-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserGroupView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user-group-rest-server"
        ],
        "summary": "deleteUserFromGroup",
        "operationId": "deleteUserFromGroupUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "userId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "userGroupId",
            "in": "path",
            "description": "userGroupId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/versions/{versionId}/license-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionLicenseReports",
        "operationId": "findVersionLicenseReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ReportView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVersionLicenseReport",
        "operationId": "createVersionLicenseReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionBasedReportRequest",
            "description": "versionBasedReportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VersionBasedReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/versions/{versionId}/license-reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionLicenseReport",
        "operationId": "findVersionLicenseReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVersionLicenseReport",
        "operationId": "deleteVersionLicenseReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/versions/{versionId}/reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionReports",
        "operationId": "findVersionReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ReportView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVersionReport",
        "operationId": "createVersionReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "versionReportRequest",
            "description": "versionReportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VersionReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/versions/{versionId}/reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVersionReport",
        "operationId": "findVersionReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVersionReport",
        "operationId": "deleteVersionReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "versionId",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "204": {}
        }
      }
    },
    "/api/vulnerabilities/{vulnerabilityId}": {
      "get": {
        "tags": [
          "vulnerability-rest-server"
        ],
        "summary": "Finds a specific vulnerability record",
        "operationId": "getUsingGET_3",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/vnd.blackducksoftware.vulnerability-1+json",
          "application/json"
        ],
        "parameters": [
          {
            "name": "vulnerabilityId",
            "in": "path",
            "description": "vulnerabilityId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/VulnerabilityView"
            }
          }
        }
      }
    },
    "/api/vulnerability-remediation-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityRemediationReports",
        "operationId": "findVulnerabilityRemediationReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ReportView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityRemediationReport",
        "operationId": "createVulnerabilityRemediationReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/vulnerability remediation report request"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/vulnerability-reports/{reportId}": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityReport",
        "operationId": "findVulnerabilityReportUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ReportView"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "deleteVulnerabilityReport",
        "operationId": "deleteVulnerabilityReportUsingDELETE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "*/*"
        ],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "description": "reportId",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/vulnerability-status-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityStatusReports",
        "operationId": "findVulnerabilityStatusReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ReportView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityStatusReport",
        "operationId": "createVulnerabilityStatusReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "simpleReportRequest",
            "description": "simpleReportRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimpleReportRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    },
    "/api/vulnerability-update-reports": {
      "get": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "findVulnerabilityUpdateReports",
        "operationId": "findVulnerabilityUpdateReportsUsingGET",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.list-1+json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Combination of : reportFormat, fileName, fileSize, createdAt, createdBy",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Page<ReportView>"
            }
          }
        }
      },
      "post": {
        "tags": [
          "report-rest-server"
        ],
        "summary": "createVulnerabilityUpdateReport",
        "operationId": "createVulnerabilityUpdateReportUsingPOST",
        "consumes": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "produces": [
          "application/json",
          "application/vnd.blackducksoftware.report-summary-1+json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "request",
            "description": "request",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VulnerabilityUpdateReportRestRequest"
            }
          }
        ],
        "responses": {
          "201": {}
        }
      }
    }
  },
  "definitions": {
    "Locale": {},
    "NotificationView": {
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "type": {
          "type": "string",
          "enum": [
            "POLICY_OVERRIDE",
            "RULE_VIOLATION",
            "VULNERABILITY",
            "LICENSE_LIMIT",
            "RULE_VIOLATION_CLEARED"
          ]
        }
      }
    },
    "FilterValueView": {
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "PolicyRuleExpression": {
      "properties": {
        "name": {
          "type": "string"
        },
        "operation": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleExpressionValue"
          }
        }
      }
    },
    "PageView<UserGroupView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserGroupView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page<NotificationSubscriptionView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationSubscriptionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExternalExtensionRequest": {
      "required": [
        "infoUrl"
      ],
      "properties": {
        "infoUrl": {
          "type": "string",
          "description": "The URL the extension hosts a representation of its general information at"
        }
      }
    },
    "PolicyRuleExpressionSet": {
      "properties": {
        "expressions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleExpression"
          }
        },
        "operator": {
          "type": "string",
          "enum": [
            "AND",
            "OR"
          ]
        }
      }
    },
    "AppliedFilterView": {
      "properties": {
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "selected": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "ProjectVersionView": {
      "required": [
        "distribution",
        "phase",
        "versionName"
      ],
      "properties": {
        "distribution": {
          "type": "string",
          "enum": [
            "EXTERNAL",
            "SAAS",
            "INTERNAL",
            "OPENSOURCE"
          ]
        },
        "license": {
          "$ref": "#/definitions/Optional<ComplexLicenseView>"
        },
        "nickname": {
          "type": "string"
        },
        "phase": {
          "type": "string",
          "enum": [
            "PLANNING",
            "DEVELOPMENT",
            "RELEASED",
            "DEPRECATED",
            "ARCHIVED"
          ]
        },
        "releaseComments": {
          "type": "string"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "description": "Read-Only; No matter the value it will always default to \u0027CUSTOM\u0027",
          "readOnly": true,
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "versionName": {
          "type": "string",
          "description": "Release Name to be created"
        }
      }
    },
    "PolicyRuleExpressionValue": {
      "properties": {
        "label": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "Collection<string>": {},
    "VulnerabilityUpdateReportRestRequest": {
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if startDate is present"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if endDate is present"
        }
      }
    },
    "PageView<CodeLocationView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CodeLocationView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UUID": {},
    "PageView<OAuthClientView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OAuthClientView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "FilterView": {
      "properties": {
        "label": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterValueView"
          }
        }
      }
    },
    "UserRequest": {
      "required": [
        "active",
        "email",
        "firstName",
        "lastName",
        "password",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Active"
        },
        "email": {
          "type": "string",
          "description": "Email"
        },
        "firstName": {
          "type": "string",
          "description": "First Name"
        },
        "lastName": {
          "type": "string",
          "description": "Last Name"
        },
        "password": {
          "type": "string",
          "description": "Password"
        },
        "userName": {
          "type": "string",
          "description": "User Name"
        }
      }
    },
    "VulnerableComponentView": {
      "required": [
        "componentName",
        "vulnerabilityWithRemediation"
      ],
      "properties": {
        "component": {
          "$ref": "#/definitions/Optional<string>"
        },
        "componentName": {
          "type": "string"
        },
        "componentVersion": {
          "$ref": "#/definitions/Optional<string>"
        },
        "componentVersionName": {
          "$ref": "#/definitions/Optional<string>"
        },
        "componentVersionOriginId": {
          "$ref": "#/definitions/Optional<string>"
        },
        "componentVersionOriginName": {
          "$ref": "#/definitions/Optional<string>"
        },
        "license": {
          "$ref": "#/definitions/Optional<ComplexLicenseView>"
        },
        "vulnerabilityWithRemediation": {
          "$ref": "#/definitions/VulnerabilityWithRemediationView"
        }
      }
    },
    "UserGroupAssignmentRequest": {
      "required": [
        "userGroupUrl"
      ],
      "properties": {
        "userGroupUrl": {
          "type": "string"
        }
      }
    },
    "RiskProfileView": {
      "properties": {
        "counts": {
          "type": "array",
          "description": "The risk at multiple severity levels",
          "items": {
            "$ref": "#/definitions/RiskCountView"
          }
        }
      }
    },
    "CompositePathWithArchiveContext": {
      "properties": {
        "archiveContext": {
          "type": "string"
        },
        "compositePathContext": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "RoleAssignmentRequest": {
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "type": "string"
        }
      }
    },
    "PageView<UserView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ReportFileContent": {
      "properties": {
        "fileContent": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileNamePrefix": {
          "type": "string"
        }
      }
    },
    "RoleView": {
      "required": [
        "description",
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "PageView<ComponentSearchResultView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentSearchResultView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VersionRiskProfileView": {
      "properties": {
        "categories": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RiskPriorityDistribution"
          }
        }
      }
    },
    "NotificationSubscriptionView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "subscriptionTarget": {
          "type": "string"
        }
      }
    },
    "PageView<NotificationView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView<PolicyRuleView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PolicyRuleView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ChangePasswordCurrentUser": {
      "required": [
        "newPassword",
        "oldPassword"
      ],
      "properties": {
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "ExternalExtensionUserView": {
      "properties": {
        "extensionOptions": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "ProjectRequest": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Summary of what the project represents in terms of functionality and use"
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the project"
        },
        "projectLevelAdjustments": {
          "type": "boolean",
          "description": "Whether BOM level adjustments are applied at the project level (to all releases)"
        },
        "projectTier": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed values : [1,2,3,4,5]"
        },
        "versionRequest": {
          "description": "Specification of the initial version to create with the project",
          "$ref": "#/definitions/ProjectVersionRequest"
        }
      }
    },
    "VulnerabilityWithRemediationView": {
      "required": [
        "baseScore",
        "cweId",
        "description",
        "exploitabilitySubscore",
        "impactSubscore",
        "remediationActualAt",
        "remediationCreatedAt",
        "remediationStatus",
        "remediationTargetAt",
        "remediationUpdatedAt",
        "severity",
        "source",
        "vulnerabilityName",
        "vulnerabilityPublishedDate",
        "vulnerabilityUpdatedDate"
      ],
      "properties": {
        "baseScore": {
          "type": "number",
          "format": "double"
        },
        "cweId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double"
        },
        "remediationActualAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationCreatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationStatus": {
          "type": "string",
          "enum": [
            "DUPLICATE",
            "IGNORED",
            "MITIGATED",
            "NEEDS_REVIEW",
            "NEW",
            "PATCHED",
            "REMEDIATION_COMPLETE",
            "REMEDIATION_REQUIRED"
          ]
        },
        "remediationTargetAt": {
          "type": "string",
          "format": "date-time"
        },
        "remediationUpdatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "severity": {
          "type": "string",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "source": {
          "type": "string",
          "enum": [
            "NVD",
            "VULNDB"
          ]
        },
        "vulnerabilityName": {
          "type": "string"
        },
        "vulnerabilityPublishedDate": {
          "type": "string",
          "format": "date-time"
        },
        "vulnerabilityUpdatedDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "PageView<ExternalExtensionConfigValueView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionConfigValueView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page<ExternalExtensionUserView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "NotificationUserView": {
      "properties": {
        "content": {
          "type": "string"
        },
        "contentType": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "notificationState": {
          "type": "string",
          "enum": [
            "NEW",
            "SEEN",
            "VISITED",
            "HIDDEN"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "POLICY_OVERRIDE",
            "RULE_VIOLATION",
            "VULNERABILITY",
            "LICENSE_LIMIT",
            "RULE_VIOLATION_CLEARED"
          ]
        }
      }
    },
    "OAuthClientRequest": {
      "properties": {
        "registeredRedirectUris": {
          "description": "The pre-defined redirect URI for this client to use during the \"authorization_code\" access grant. See OAuth spec, section 4.1.1",
          "$ref": "#/definitions/Collection<string>"
        },
        "scopes": {
          "description": "The scope of this client. Empty if the client isn\u0027t scoped",
          "$ref": "#/definitions/Collection<string>"
        }
      }
    },
    "ScanSummaryView": {
      "required": [
        "status"
      ],
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "status": {
          "type": "string",
          "enum": [
            "UNSTARTED",
            "SCANNING",
            "SAVING_SCAN_DATA",
            "SCAN_DATA_SAVE_COMPLETE",
            "REQUESTED_MATCH_JOB",
            "MATCHING",
            "BOM_VERSION_CHECK",
            "BUILDING_BOM",
            "COMPLETE",
            "CANCELLED",
            "CLONED",
            "ERROR_SCANNING",
            "ERROR_SAVING_SCAN_DATA",
            "ERROR_MATCHING",
            "ERROR_BUILDING_BOM",
            "ERROR"
          ]
        },
        "statusMessage": {
          "type": "string"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        }
      }
    },
    "VersionBomPolicyStatusView": {
      "properties": {
        "componentVersionStatusCounts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NameValuePairView"
          }
        },
        "overallStatus": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ResetPassword": {
      "required": [
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        }
      }
    },
    "PageView<VulnerableComponentView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerableComponentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Optional<string>": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "ModelAndView": {
      "properties": {
        "empty": {
          "type": "boolean"
        },
        "model": {
          "type": "object"
        },
        "modelMap": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "reference": {
          "type": "boolean"
        },
        "view": {
          "$ref": "#/definitions/View"
        },
        "viewName": {
          "type": "string"
        }
      }
    },
    "Page<RoleView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "BomComponentPolicyStatusView": {
      "properties": {
        "approvalStatus": {
          "type": "string",
          "enum": [
            "NOT_IN_VIOLATION",
            "IN_VIOLATION_OVERRIDDEN",
            "IN_VIOLATION"
          ]
        }
      }
    },
    "PageView<ExternalExtensionView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExternalExtensionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "UserView": {
      "required": [
        "active",
        "email",
        "externalUserName",
        "firstName",
        "lastName",
        "type",
        "userName"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "The active status of the user."
        },
        "email": {
          "type": "string",
          "description": "The email of the user. Can\u0027t be modified for an external users from Hub"
        },
        "externalUserName": {
          "type": "string",
          "description": "The external name of the user. This will have a value if the type is EXTERNAL. Can\u0027t be modified for an external users from Hub"
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the user. Can\u0027t be modified for an external users from Hub"
        },
        "lastName": {
          "type": "string",
          "description": "The last name of the user. Can\u0027t be modified for an external users from Hub"
        },
        "type": {
          "type": "string",
          "description": "The type of the user. Whether INTERNAL or EXTERNAL"
        },
        "userName": {
          "type": "string",
          "description": "The name of the user"
        }
      }
    },
    "PageView<MatchedFileView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MatchedFileView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PolicyRuleView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL where more information on the creating user can be found"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "expression": {
          "$ref": "#/definitions/PolicyRuleExpressionSet"
        },
        "name": {
          "type": "string"
        },
        "overridable": {
          "type": "boolean"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByUser": {
          "type": "string",
          "description": "URL where more information on the last user to update the policy can be found"
        }
      }
    },
    "vulnerability remediation report request": {
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if startDate is present"
        },
        "remediationTypes": {
          "type": "array",
          "description": "defaults to empty if not present",
          "items": {
            "type": "string",
            "enum": [
              "DUPLICATE",
              "IGNORED",
              "MITIGATED",
              "NEEDS_REVIEW",
              "NEW",
              "PATCHED",
              "REMEDIATION_COMPLETE",
              "REMEDIATION_REQUIRED"
            ]
          }
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "description": "optional if endDate is present"
        }
      }
    },
    "NameValuePairView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "object"
        }
      }
    },
    "VulnerabilityView": {
      "properties": {
        "accessComplexity": {
          "type": "string",
          "description": "How difficult it is to exploit the vulnerabilty",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "accessVector": {
          "type": "string",
          "description": "How the vulnerability may be exploited",
          "enum": [
            "LOCAL",
            "ADJACENT_NETWORK",
            "NETWORK"
          ]
        },
        "authentication": {
          "type": "string",
          "description": "How many times authentication is required from the attacker to exploit the vulnerability",
          "enum": [
            "MULTIPLE",
            "SINGLE",
            "NONE"
          ]
        },
        "availabilityImpact": {
          "type": "string",
          "description": "Impact on the availability of the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "baseScore": {
          "type": "number",
          "format": "double",
          "description": "Score summarizing the overall risk presented by the vulnerability"
        },
        "confidentialityImpact": {
          "type": "string",
          "description": "Impact on the confidentiality of data on the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "cweId": {
          "type": "string",
          "description": "ID of the Common Weaknesses and Exposures (CWE) category the vulnerability belongs to"
        },
        "description": {
          "type": "string",
          "description": "Short summary of the vulnerability\u0027s properties"
        },
        "exploitabilitySubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the risk presented by current exploit techniques or exploit availability"
        },
        "impactSubscore": {
          "type": "number",
          "format": "double",
          "description": "Sub-score detailing the data exposure that occurs if the vulnerability is successfully exploited"
        },
        "integrityImpact": {
          "type": "string",
          "description": "Impact on the integrity of data on the system if the vulnerability is exploited",
          "enum": [
            "COMPLETE",
            "PARTIAL",
            "NONE"
          ]
        },
        "severity": {
          "type": "string",
          "description": "The general level of risk severity presented by the vulnerability",
          "enum": [
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        },
        "source": {
          "type": "string",
          "description": "The vulnerability database/reporting authority this vulnerability originates from",
          "enum": [
            "NVD",
            "VULNDB"
          ]
        },
        "vulnerabilityName": {
          "type": "string",
          "description": "Identifying name of the vulnerability"
        },
        "vulnerabilityPublishedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date the vulnerability was created/published"
        },
        "vulnerabilityUpdatedDate": {
          "type": "string",
          "format": "date-time",
          "description": "The date of the last modification to the vulnerability information"
        }
      },
      "description": "Representation of a potential software security issue"
    },
    "Page<UserView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "SimpleReportRequest": {
      "required": [
        "reportFormat"
      ],
      "properties": {
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        }
      }
    },
    "PageView<ScanSummaryView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScanSummaryView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "CodeLocationView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the code location was created"
        },
        "mappedProjectVersion": {
          "description": "URL specifying the version linked to the code location",
          "$ref": "#/definitions/Optional<string>"
        },
        "type": {
          "type": "string",
          "description": "Location classification relating to where the source comes from",
          "enum": [
            "SCM",
            "FS",
            "BOM_IMPORT"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the code location was last updated"
        },
        "url": {
          "type": "string",
          "description": "URL describing the location of the source"
        }
      }
    },
    "Page<ProjectVersionView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectVersionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "LicenseView": {
      "properties": {
        "codeSharing": {
          "type": "string",
          "enum": [
            "PERMISSIVE",
            "RECIPROCAL",
            "WEAK_RECIPROCAL",
            "RECIPROCAL_AGPL",
            "UNKNOWN"
          ]
        },
        "name": {
          "type": "string"
        },
        "ownership": {
          "type": "string",
          "enum": [
            "OPEN_SOURCE",
            "PROPRIETARY",
            "UNKNOWN"
          ]
        }
      }
    },
    "UserGroupView": {
      "required": [
        "createdFrom",
        "name"
      ],
      "properties": {
        "active": {
          "type": "boolean",
          "description": "Whether the user group is active and usable within the system"
        },
        "createdFrom": {
          "type": "string",
          "description": "The system that provided the group",
          "enum": [
            "INTERNAL",
            "LDAP",
            "SITEMINDER",
            "X509"
          ]
        },
        "externalName": {
          "type": "string",
          "description": "Name used to identify the group within another system"
        },
        "name": {
          "type": "string",
          "description": "The identifying label of the user group"
        }
      }
    },
    "VersionBomLicenseView": {
      "required": [
        "license"
      ],
      "properties": {
        "license": {
          "type": "string",
          "description": "Reference to the full representation of the license"
        },
        "licenseDisplay": {
          "type": "string",
          "description": "Label distinguishing the license from other licenses"
        },
        "licenseType": {
          "type": "string",
          "description": "How this license is related to other licenses within a given context",
          "enum": [
            "CONJUNCTIVE",
            "DISJUNCTIVE"
          ]
        },
        "licenses": {
          "type": "array",
          "description": "Additional licenses related to this license via the provided type",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        }
      }
    },
    "ActivityDataView": {
      "properties": {
        "commitCount12Month": {
          "type": "integer",
          "format": "int64",
          "description": "The number of commits in a 12 month period"
        },
        "contributorCount12Month": {
          "type": "integer",
          "format": "int64",
          "description": "The number of contributors in a 12 month period"
        },
        "lastCommitDate": {
          "type": "string",
          "format": "date-time",
          "description": "The last time a commit was made to the project"
        },
        "trending": {
          "type": "string",
          "description": "The overall characteristics of development activity",
          "enum": [
            "DECREASING",
            "STABLE",
            "INCREASING"
          ]
        }
      }
    },
    "Page<ComponentVersionView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComponentVersionView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ExternalExtensionConfigValueView": {
      "required": [
        "name",
        "optionType",
        "options",
        "required",
        "singleValue",
        "title",
        "value"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "A user-consumable summary of what the option represents"
        },
        "name": {
          "type": "string",
          "description": "A machine-consumable identifier identifying the option despite any changes in title/description"
        },
        "optionType": {
          "type": "string",
          "description": "The type of option being presented",
          "enum": [
            "BOOLEAN",
            "STRING",
            "INTEGER",
            "ARRAY"
          ]
        },
        "options": {
          "type": "array",
          "description": "The set of possible options a user may choose from for the setting",
          "items": {
            "$ref": "#/definitions/ConfigOptionView"
          }
        },
        "required": {
          "type": "boolean",
          "description": "true if the option must be set when saving modification, false otherwise"
        },
        "singleValue": {
          "type": "boolean",
          "description": "True if the user must provide or select only a single value from all possible choices, false if multiple values may be selected"
        },
        "title": {
          "type": "string",
          "description": "A user-consumable label distinguishing the option among all options presented"
        },
        "value": {
          "type": "array",
          "description": "The current value(s) selected for the option",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VersionBomComponentView": {
      "properties": {
        "activityData": {
          "description": "Description of development activity on the component",
          "$ref": "#/definitions/ActivityDataView"
        },
        "activityRiskProfile": {
          "description": "Risk levels associated with activity aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "component": {
          "type": "string",
          "description": "Reference to the representation of the component"
        },
        "componentName": {
          "type": "string",
          "description": "Label distinguishing the component from other components"
        },
        "componentVersion": {
          "type": "string",
          "description": "Reference to the representation of the component version"
        },
        "componentVersionName": {
          "type": "string",
          "description": "Label distinguishing the version from other versions of the component"
        },
        "licenseRiskProfile": {
          "description": "Risk levels associated with licensing aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "licenses": {
          "type": "array",
          "description": "Any license(s) associated with the component\u0027s use in the project",
          "items": {
            "$ref": "#/definitions/VersionBomLicenseView"
          }
        },
        "operationalRiskProfile": {
          "description": "Risk levels associated with operational aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The date the component was made available for use"
        },
        "securityRiskProfile": {
          "description": "Risk levels associated with security aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        },
        "versionRiskProfile": {
          "description": "Risk levels associated with versioning aspects of the component",
          "$ref": "#/definitions/RiskProfileView"
        }
      }
    },
    "ProjectView": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string",
          "description": "Summary of what the project represents in terms of functionality and use"
        },
        "name": {
          "type": "string",
          "description": "The general identifier of the project"
        },
        "projectLevelAdjustments": {
          "type": "boolean",
          "description": "Whether BOM level adjustments are applied at the project level (to all releases)"
        },
        "projectTier": {
          "type": "integer",
          "format": "int32",
          "description": "Allowed values : [1,2,3,4,5]"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        }
      }
    },
    "MatchedFileView": {
      "required": [
        "filePath",
        "usages"
      ],
      "properties": {
        "filePath": {
          "$ref": "#/definitions/CompositePathWithArchiveContext"
        },
        "usages": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "DYNAMICALLY_LINKED",
              "STATICALLY_LINKED",
              "SOURCE_CODE",
              "DEV_TOOL_EXCLUDED",
              "SEPARATE_WORK",
              "IMPLEMENTATION_OF_STANDARD"
            ]
          }
        }
      }
    },
    "ConfigOptionView": {
      "properties": {
        "name": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "OAuthClientView": {
      "required": [
        "clientId",
        "grantTypes"
      ],
      "properties": {
        "accessTokenValiditySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The access token validity period for this client",
          "readOnly": true
        },
        "clientId": {
          "type": "string",
          "description": "The OAuth ID used by the external application to identify itself",
          "readOnly": true
        },
        "grantTypes": {
          "description": "The various authentication mechanisms the client is allowed to use with the application",
          "readOnly": true,
          "$ref": "#/definitions/Collection<string>"
        },
        "refreshTokenValiditySeconds": {
          "type": "integer",
          "format": "int32",
          "description": "The refresh token validity period for this client",
          "readOnly": true
        },
        "registeredRedirectUris": {
          "description": "The pre-defined redirect URI for this client to use during the \"authorization_code\" access grant. See OAuth spec, section 4.1.1",
          "$ref": "#/definitions/Collection<string>"
        },
        "scopes": {
          "description": "The scope of this client. Empty if the client isn\u0027t scoped",
          "readOnly": true,
          "$ref": "#/definitions/Collection<string>"
        }
      }
    },
    "ComponentSearchResultView": {
      "properties": {
        "component": {
          "type": "string",
          "description": "URL to the full representation of the component"
        },
        "componentName": {
          "type": "string",
          "description": "Label summarizing the identity of the component found"
        },
        "originId": {
          "type": "string",
          "description": "ID indicating where the component came from"
        },
        "version": {
          "type": "string",
          "description": "URL to the full representation of the version"
        },
        "versionName": {
          "type": "string",
          "description": "Label specifying the specific version of the component found"
        }
      }
    },
    "ReportContent": {
      "properties": {
        "reportContent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportFileContent"
          }
        }
      }
    },
    "Page<ReportView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReportView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RoleAssignmentView": {
      "required": [
        "description",
        "name",
        "role"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "ModelMap": {
      "type": "object",
      "additionalProperties": {
        "type": "object"
      }
    },
    "ReportView": {
      "properties": {
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was created"
        },
        "createdBy": {
          "type": "string",
          "description": "The user that originally created this report"
        },
        "createdByUser": {
          "type": "string",
          "description": "URL linking to more information about the user who created this report"
        },
        "fileName": {
          "type": "string",
          "description": "The file name for the given report"
        },
        "fileNamePrefix": {
          "type": "string",
          "description": "The file name prefix for the given report"
        },
        "fileSize": {
          "type": "integer",
          "format": "int64",
          "description": "The file size for the given report"
        },
        "finishedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was finished"
        },
        "locale": {
          "type": "string",
          "description": "The locale used in generating the report\u0027s contents"
        },
        "reportFormat": {
          "type": "string",
          "description": "The file format for the given report",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "description": "The date/time the report was last updated"
        }
      }
    },
    "Page<ProjectView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskPriorityDistribution": {
      "properties": {
        "HIGH": {
          "type": "integer",
          "format": "int32"
        },
        "LOW": {
          "type": "integer",
          "format": "int32"
        },
        "MEDIUM": {
          "type": "integer",
          "format": "int32"
        },
        "OK": {
          "type": "integer",
          "format": "int32"
        },
        "UNKNOWN": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Page<RoleAssignmentView>": {
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RoleAssignmentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RiskCountView": {
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "The level of risk within the severity threshold"
        },
        "countType": {
          "type": "string",
          "description": "The level of severity being quantified",
          "enum": [
            "UNKNOWN",
            "OK",
            "LOW",
            "MEDIUM",
            "HIGH"
          ]
        }
      }
    },
    "View": {
      "properties": {
        "contentType": {
          "type": "string"
        }
      }
    },
    "PageView<VulnerabilityView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VulnerabilityView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ProjectVersionRequest": {
      "required": [
        "distribution",
        "phase",
        "versionName"
      ],
      "properties": {
        "distribution": {
          "type": "string",
          "description": "The distribution channel of the release",
          "enum": [
            "EXTERNAL",
            "SAAS",
            "INTERNAL",
            "OPENSOURCE"
          ]
        },
        "nickname": {
          "type": "string",
          "description": "An alternative commonly used name or alias for the release"
        },
        "phase": {
          "type": "string",
          "description": "The phase in the development life-cycle of the release",
          "enum": [
            "PLANNING",
            "DEVELOPMENT",
            "RELEASED",
            "DEPRECATED",
            "ARCHIVED"
          ]
        },
        "releaseComments": {
          "type": "string",
          "description": "Pertinent comments or notes associated with the release"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time",
          "description": "The logical date the Release became available for usage"
        },
        "versionName": {
          "type": "string",
          "description": "The general identifier of the release version"
        }
      }
    },
    "VersionBasedReportRequest": {
      "required": [
        "locale",
        "reportFormat",
        "reportType",
        "reportUrl",
        "versionId"
      ],
      "properties": {
        "locale": {
          "$ref": "#/definitions/Locale"
        },
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "reportType": {
          "type": "string",
          "enum": [
            "VERSION_LICENSE",
            "VERSION",
            "VULNERABILITY_REMEDIATION",
            "VULNERABILITY_STATUS",
            "VULNERABILITY_UPDATE"
          ]
        },
        "reportUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "versionId": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "Optional<ComplexLicenseView>": {
      "properties": {
        "present": {
          "type": "boolean"
        }
      }
    },
    "ComponentView": {
      "required": [
        "name"
      ],
      "properties": {
        "description": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string",
          "enum": [
            "CUSTOM",
            "KB"
          ]
        }
      }
    },
    "ExternalExtensionView": {
      "required": [
        "authenticated",
        "infoUrl",
        "name"
      ],
      "properties": {
        "authenticated": {
          "type": "boolean",
          "description": "Whether the extension is currently successfully authenticated or not"
        },
        "description": {
          "type": "string",
          "description": "Short summary of the extension describing its functionality"
        },
        "infoUrl": {
          "type": "string",
          "description": "URL provided by an extension which specifies the extension\u0027s properties"
        },
        "name": {
          "type": "string",
          "description": "Label summarizing the extension"
        }
      }
    },
    "ComponentVersionView": {
      "required": [
        "versionName"
      ],
      "properties": {
        "license": {
          "$ref": "#/definitions/Optional<ComplexLicenseView>"
        },
        "releasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "readOnly": true,
          "enum": [
            "CUSTOM",
            "KB"
          ]
        },
        "versionName": {
          "type": "string"
        }
      }
    },
    "ComplexLicenseView": {
      "properties": {
        "codeSharing": {
          "type": "string",
          "enum": [
            "PERMISSIVE",
            "RECIPROCAL",
            "WEAK_RECIPROCAL",
            "RECIPROCAL_AGPL",
            "UNKNOWN"
          ]
        },
        "license": {
          "$ref": "#/definitions/Optional<string>"
        },
        "licenses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ComplexLicenseView"
          }
        },
        "name": {
          "type": "string"
        },
        "ownership": {
          "type": "string",
          "enum": [
            "OPEN_SOURCE",
            "PROPRIETARY",
            "UNKNOWN"
          ]
        },
        "type": {
          "type": "string",
          "enum": [
            "CONJUNCTIVE",
            "DISJUNCTIVE"
          ]
        }
      }
    },
    "Map<string,RiskPriorityDistribution>": {
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/RiskPriorityDistribution"
      }
    },
    "PageView<VersionBomComponentView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VersionBomComponentView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "PageView<NotificationUserView>": {
      "properties": {
        "appliedFilters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AppliedFilterView"
          }
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NotificationUserView"
          }
        },
        "totalCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "VersionReportRequest": {
      "required": [
        "categories",
        "locale",
        "reportFormat",
        "reportUrl",
        "versionId"
      ],
      "properties": {
        "categories": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VERSION",
              "CODE_LOCATIONS",
              "COMPONENTS",
              "SECURITY",
              "FILES",
              "ATTACHMENTS"
            ]
          }
        },
        "locale": {
          "$ref": "#/definitions/Locale"
        },
        "reportFormat": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "TEXT"
          ]
        },
        "reportType": {
          "type": "string",
          "enum": [
            "VERSION_LICENSE",
            "VERSION",
            "VULNERABILITY_REMEDIATION",
            "VULNERABILITY_STATUS",
            "VULNERABILITY_UPDATE"
          ]
        },
        "reportUrl": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "versionId": {
          "type": "string",
          "format": "uuid"
        }
      }
    }
  }
}